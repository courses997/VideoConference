/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PermissionsService } from "../permissions.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PermissionsCreateInput } from "./PermissionsCreateInput";
import { Permissions } from "./Permissions";
import { PermissionsFindManyArgs } from "./PermissionsFindManyArgs";
import { PermissionsWhereUniqueInput } from "./PermissionsWhereUniqueInput";
import { PermissionsUpdateInput } from "./PermissionsUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PermissionsControllerBase {
  constructor(
    protected readonly service: PermissionsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Permissions })
  @nestAccessControl.UseRoles({
    resource: "Permissions",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPermissions(
    @common.Body() data: PermissionsCreateInput
  ): Promise<Permissions> {
    return await this.service.createPermissions({
      data: {
        ...data,

        meeting: data.meeting
          ? {
              connect: data.meeting,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        meeting: {
          select: {
            id: true,
          },
        },

        role: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Permissions] })
  @ApiNestedQuery(PermissionsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Permissions",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async permissionsItems(
    @common.Req() request: Request
  ): Promise<Permissions[]> {
    const args = plainToClass(PermissionsFindManyArgs, request.query);
    return this.service.permissionsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,

        meeting: {
          select: {
            id: true,
          },
        },

        role: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Permissions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Permissions",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async permissions(
    @common.Param() params: PermissionsWhereUniqueInput
  ): Promise<Permissions | null> {
    const result = await this.service.permissions({
      where: params,
      select: {
        createdAt: true,
        id: true,

        meeting: {
          select: {
            id: true,
          },
        },

        role: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Permissions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Permissions",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePermissions(
    @common.Param() params: PermissionsWhereUniqueInput,
    @common.Body() data: PermissionsUpdateInput
  ): Promise<Permissions | null> {
    try {
      return await this.service.updatePermissions({
        where: params,
        data: {
          ...data,

          meeting: data.meeting
            ? {
                connect: data.meeting,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          meeting: {
            select: {
              id: true,
            },
          },

          role: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Permissions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Permissions",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePermissions(
    @common.Param() params: PermissionsWhereUniqueInput
  ): Promise<Permissions | null> {
    try {
      return await this.service.deletePermissions({
        where: params,
        select: {
          createdAt: true,
          id: true,

          meeting: {
            select: {
              id: true,
            },
          },

          role: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
