/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Permissions as PrismaPermissions,
  Meeting as PrismaMeeting,
  User as PrismaUser,
} from "@prisma/client";

export class PermissionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PermissionsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.permissions.count(args);
  }

  async permissionsItems(
    args: Prisma.PermissionsFindManyArgs
  ): Promise<PrismaPermissions[]> {
    return this.prisma.permissions.findMany(args);
  }
  async permissions(
    args: Prisma.PermissionsFindUniqueArgs
  ): Promise<PrismaPermissions | null> {
    return this.prisma.permissions.findUnique(args);
  }
  async createPermissions(
    args: Prisma.PermissionsCreateArgs
  ): Promise<PrismaPermissions> {
    return this.prisma.permissions.create(args);
  }
  async updatePermissions(
    args: Prisma.PermissionsUpdateArgs
  ): Promise<PrismaPermissions> {
    return this.prisma.permissions.update(args);
  }
  async deletePermissions(
    args: Prisma.PermissionsDeleteArgs
  ): Promise<PrismaPermissions> {
    return this.prisma.permissions.delete(args);
  }

  async getMeeting(parentId: string): Promise<PrismaMeeting | null> {
    return this.prisma.permissions
      .findUnique({
        where: { id: parentId },
      })
      .meeting();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.permissions
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
